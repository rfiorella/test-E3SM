#! /usr/bin/env python3

"""
Compare two build trees to see if compiler or link flags have changed.
"""

import argparse, sys, os, subprocess, glob, difflib
from pathlib import Path

###############################################################################
def run_cmd_no_fail(cmd, from_dir=None):
###############################################################################
    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                            cwd=from_dir, text=True)
    output, errput = proc.communicate()
    stat = proc.wait()

    assert stat == 0, f"CMD: {cmd} FAILED when run from {from_dir}\nERROR: {errput}"
    assert isinstance(output, str)

    return output.strip()

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <filename>
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Compare case1 to case2 \033[0m
    > {0} $case1dir $case2dir
""".format(os.path.basename(args[0])),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("case1", help="The path to case1")

    parser.add_argument("case2", help="The path to case2")

    args = parser.parse_args(args[1:])

    return args

###############################################################################
def find_files(builddir_cmake, filename):
###############################################################################
    return list(sorted(glob.glob(f"{builddir_cmake}/**/{filename}", recursive=True)))

###############################################################################
def compare_contents(case1, case2, file1, file2, contents1, contents2):
###############################################################################
    normalized_contents2 = contents2.replace(case2, case1)

    compare = difflib.ndiff(contents1.splitlines(), normalized_contents2.splitlines())
    differences = [item for item in compare if item[0] != ' ']

    if differences:
        print(f"File {file1} did not match {file2}, diff:")
        for a, b in differences:
            print(f"  {a} {b}")

            return False

    return True

###############################################################################
def compare_file_lists(case1, case2, files1, files2):
###############################################################################
    result = True
    for file1, file2 in zip(files1, files2):
        file1p = Path(file1)
        file2p = Path(file2)

        assert file1p.name == file2p.name, f"File orders did not match, {file1p.name} != {file2p.name}"

        file1c = file1p.open().read()
        file2c = file2p.open().read()

        result &= compare_contents(case1, case2, file1, file2, file1c, file2c)

    return result

###############################################################################
def compare_flags(case1, case2):
###############################################################################
    result = True

    assert os.path.isdir(case1), f"{case1} is not an existing directory"
    assert os.path.isdir(case2), f"{case2} is not an existing directory"

    builddir1 = run_cmd_no_fail("./xmlquery EXEROOT --value", from_dir=case1)
    builddir2 = run_cmd_no_fail("./xmlquery EXEROOT --value", from_dir=case2)

    builddir1_cmake = os.path.join(builddir1, "cmake-bld")
    builddir2_cmake = os.path.join(builddir2, "cmake-bld")

    assert os.path.isdir(builddir1_cmake), \
        f"{builddir1_cmake} is not an existing directory, you need to run case.build in {case1}"
    assert os.path.isdir(builddir2_cmake), \
        f"{builddir2_cmake} is not an existing directory, you need to run case.build in {case2}"

    flag_files1 = find_files(builddir1_cmake, "flags.make")
    flag_files2 = find_files(builddir2_cmake, "flags.make")

    link_files1 = find_files(builddir1_cmake, "link.txt")
    link_files2 = find_files(builddir2_cmake, "link.txt")

    result &= compare_file_lists(case1, case2, flag_files1, flag_files2)

    result &= compare_file_lists(case1, case2, link_files1, link_files2)

    return result

###############################################################################
def _main_func(description):
###############################################################################
    success = compare_flags(**vars(parse_command_line(sys.argv, description)))

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
