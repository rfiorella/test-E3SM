# This macro creates tests to compare a set of files, which differ in their name
# by a simple substring. For instance, files generated with a different number of
# MPI ranks, containing something like np1,np2,... in their names.

# Mandatory keyword arguments
#  - TEST_META_NAME: the base name to be given to the tests generated by this macro
#  - FILE_META_NAME: the name of the files
#  - MAGIC_STRING  : the string that will be replaced with MAGIC_VALUES entries
#  - MAGIC_VALUES  : the values to be used to replace ${MAGIC_STRING}
# Optional keyword arguments
#  - LABELS: labels to attach to the created tests
#  - FIXTURES_REQUIRED: list of fixtures required
# Note:
#  - TEST_META_NAME and FILE_META_NAME *MUST* contain the MAGIC_STRING
#  - FIXTURES_REQUIRED *can* contain the MAGIC_STRING (but doesn't have to)


function (CompareNCFilesFamily)
  # Parse keyword arguments
  set (options)
  set (args1v TEST_META_NAME FILE_META_NAME MAGIC_STRING)
  set (argsMv MAGIC_VALUES LABELS FIXTURES_REQUIRED)

  cmake_parse_arguments(PARSE "${options}" "${args1v}" "${argsMv}" ${ARGN})
  CheckMacroArgs(CompareNCFilesFamily PARSE "${options}" "${args1v}" "${argsMv}")

  # Sanity checks
  if (NOT PARSE_TEST_META_NAME)
    message ("Error! CompareNCFilesFamily requires the keyword argument TEST_META_NAME")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_FILE_META_NAME)
    message ("Error! CompareNCFilesFamily requires the keyword argument FILE_META_NAME")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_MAGIC_STRING)
    message ("Error! CompareNCFilesFamily requires the keyword argument MAGIC_STRING")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_MAGIC_VALUES)
    message ("Error! CompareNCFilesFamily requires the keyword argument MAGIC_VALUES")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_TEST_META_NAME MATCHES ${PARSE_MAGIC_STRING})
    message ("Error! MAGIC_STRING not contained in TEST_META_NAME.")
    message (" MAGIC_STRING: ${PARSE_MAGIC_STRING}")
    message (" TEST_META_NAME: ${PARSE_TEST_META_NAME}")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_FILE_META_NAME MATCHES ${PARSE_MAGIC_STRING})
    message ("Error! MAGIC_STRING not contained in FILE_META_NAME.")
    message (" MAGIC_STRING: ${PARSE_MAGIC_STRING}")
    message (" FILE_META_NAME: ${PARSE_FILE_META_NAME}")
    message (FATAL_ERROR "Aborting...")
  endif()

  # Ensure cprnc is built
  include (BuildCprnc)
  BuildCprnc()

  # Remove first entry of magic values. Compare all other entries against this
  list (POP_FRONT PARSE_MAGIC_VALUES first)
  string (REPLACE "${PARSE_MAGIC_STRING}" "${first}" TGT_FILE ${PARSE_FILE_META_NAME})

  # FIXTURES_REQUIRED *can* also contain the magic string
  foreach (item IN LISTS PARSE_MAGIC_VALUES)
    # Expand the magic string in src file
    string (REPLACE ${PARSE_MAGIC_STRING} ${item} SRC_FILE ${PARSE_FILE_META_NAME})

    # Create the test. Also the test base name may contain the magic string
    string (REPLACE ${PARSE_MAGIC_STRING} ${item} TEST_NAME ${PARSE_TEST_META_NAME})

    add_test (
      NAME ${TEST_NAME}
      COMMAND cmake -P ${CMAKE_BINARY_DIR}/bin/CprncTest.cmake ${SRC_FILE} ${TGT_FILE}
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

    # Set test properties, if needed
    if (PARSE_LABELS)
      set_tests_properties(${TEST_NAME} PROPERTIES LABELS "${PARSE_LABELS}")
    endif()

    # Set test fixtures, if needed
    if (PARSE_FIXTURES_REQUIRED)
      set (TMP_LIST ${PARSE_FIXTURES_REQUIRED})
      list (TRANSFORM TMP_LIST REPLACE "${PARSE_MAGIC_STRING}" ${item})

      set_tests_properties(${TEST_NAME} PROPERTIES
        FIXTURES_REQUIRED "${TMP_LIST}")
    endif()
  endforeach()
endfunction (CompareNCFilesFamily)
