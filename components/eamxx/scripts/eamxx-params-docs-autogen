#!/usr/bin/env python3

"""
Generate a markdown file with explanation of all EAMxx namelist defaults parameters
"""

import sys, os

from pathlib import Path
from utils import _ensure_pylib_impl

_ensure_pylib_impl("mdutils")

import xml.etree.ElementTree as ET
from mdutils.mdutils import MdUtils
from mdutils import Html

sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), "cime_config"))
from eamxx_buildnml_impl import resolve_all_inheritances, get_valid_selectors
#  import os, sys, re

#  import xml.etree.ElementTree as ET
#  import xml.dom.minidom as md

#  _CIMEROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..","..","..","cime")
#  sys.path.append(os.path.join(_CIMEROOT, "CIME", "Tools"))

#  # Add path to scream libs
#  sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "scripts"))

#  # Cime imports
#  from standard_script_setup import * # pylint: disable=wildcard-import
#  from CIME.utils import expect, safe_copy, SharedArea

#  # SCREAM imports
#  from eamxx_buildnml_impl import get_valid_selectors, get_child, refine_type, \
#          resolve_all_inheritances, gen_atm_proc_group, check_all_values
#  from atm_manip import atm_config_chg_impl, unbuffer_changes, apply_buffer

#  from utils import ensure_yaml
#  ensure_yaml()
#  import yaml

#  logger = logging.getLogger(__name__) # pylint: disable=undefined-variable

#  CIME_VAR_RE = re.compile(r'[$][{](\w+)[}]')

# These are special attributes used by buildnml and other scripts to
# perform some checks. In particular:
#  - type: allows to verify compatibility (e.g., can't assing 3.2 to an integer)
#  - valid_values: allows to specify a set of valid values
#  - locked: if set to true, the parameter cannot be modified (via atmchange)
#  - constraints: allows to specify constraints on values. Valid constraints
#    are lt, le, ne, gt, ge, and mod. Multiple constrained are separated by ';'.
#    Examples:
#      - constraints="ge 0; lt 4" means the value V must satisfy V>=0 && V<4.
#      - constraints="mod 2 eq 0" means the value V must be a multiple of 2.
METADATA_ATTRIBS = ("type", "valid_values", "locked", "constraints", "inherit")


###########################################################################
def add_param(docs,scope,item):
###########################################################################
    # Locked parameters are not to be configured at runtime, so don't even bother
    # E.g, a locked param is something we need to get in the input file, like
    # the restart write frequency, but we don't want the user to modify it
    # via atmchange
    if "locked" in item.attrib.keys():
        return
    docs.new_line(f"* {scope}{item.tag}:")

    pdoc = item.attrib['doc'] if 'doc' in item.attrib.keys() else "**MISSING**"
    docs.new_line(f"    - description: {pdoc}")

    ptype = item.attrib['type'] if 'type' in item.attrib.keys() else "**MISSING**"
    docs.new_line(f"    - type: {ptype}")

    pvalid = item.attrib['valid_values'] if 'valid_values' in item.attrib.keys() else None
    if pvalid is not None:
        docs.new_line(f"    - valid values: {pvalid}")
    pconstr = item.attrib['constraints'] if 'constraints' in item.attrib.keys() else None
    if pconstr is not None:
        docs.new_line(f"    - constraints: {pconstr}")

###########################################################################
def add_children(docs,xml,scope=""):
###########################################################################
    done = []
    # Locked parameters are not to be configured at runtime, so don't even bother
    # E.g, a locked param is something we need to get in the input file, like
    # the restart write frequency, but we don't want the user to modify it
    # via atmchange
    if "locked" in xml.attrib.keys():
        return
    for item in xml:
        # The same entry may appear multiple times in the XML defaults file,
        # each time with different selectors. We don't want to generate the
        # same documentation twice.
        if item.tag in done:
            continue
        done.append(item.tag)
        if len(item)>0:
            add_children (docs,item,f"{scope}{xml.tag}::")
        else:
            add_param(docs,f"{scope}{xml.tag}::",item)
    docs.new_line()

###########################################################################
def generate_params_docs():
###########################################################################

    eamxx = Path(__file__).parent.parent.resolve()
    xml_defaults_file = eamxx / "cime_config" / "namelist_defaults_scream.xml"
    output_file = eamxx / "docs" / "mkdocs" / "docs" / "common" / "eamxx_params.md"

    print("Generating eamxx params documentation...")
    print(f"  output file: {output_file}")

    with open(xml_defaults_file, "r") as fd:
        tree = ET.parse(fd)
        xml_defaults = tree.getroot()

    selectors = get_valid_selectors(xml_defaults)
    resolve_all_inheritances(xml_defaults)

    docs = MdUtils(file_name=str(output_file),title='EAMxx runtime configurable parameters')
    with open (output_file, "w") as fd:
        docs.new_header(level=1,title='Atmosphere Processes Parameters')
        aps = xml_defaults.find('atmosphere_processes_defaults')
        for ap in aps:
            if ap.tag.startswith('atm_proc'):
                continue
            docs.new_header(level=2,title=ap.tag)
            add_children(docs,ap)
                
        ic = xml_defaults.find('initial_conditions')
        docs.new_header(level=1,title="Initial Conditions Parameters")
        add_children(docs,ic)

        ad = xml_defaults.find('driver_options')
        docs.new_header(level=1,title='Atmosphere Driver Parameters')
        add_children(docs,ad)

        scorpio = xml_defaults.find('Scorpio')
        docs.new_header(level=1,title='Scorpio Parameters')
        add_children(docs,scorpio)

        homme = xml_defaults.find('ctl_nl')
        docs.new_header(level=1,title='Homme namelist')
        add_children(docs,homme)
    docs.create_md_file()

    print("Generating eamxx params documentation ... SUCCESS!")
    return True

###############################################################################
def _main_func(description):
###############################################################################

    success = generate_params_docs()
    #  success = generate_params_docs(**vars(parse_command_line(sys.argv, description)))

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
