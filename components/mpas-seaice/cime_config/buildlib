#!/usr/bin/env python

"""
build mpas-si library
"""

import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib         import parse_input
from CIME.case             import Case
from CIME.utils            import expect, run_bld_cmd_ensure_logging, safe_copy
from CIME.build            import get_standard_cmake_args

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################
    component = "mpas-seaice"
    component_dir = "ice"
    component_driver = "seaice_acme_driver"
    core = "seaice"

    srcroot     = case.get_value("SRCROOT")
    objroot     = case.get_value("OBJROOT")
    casebuild   = case.get_value("CASEBUILD")
    casetools   = case.get_value("CASETOOLS")
    objroot     = case.get_value("OBJROOT")
    libroot     = case.get_value("LIBROOT")
    gmake_j     = case.get_value("GMAKE_J")
    gmake       = case.get_value("GMAKE")
    mach        = case.get_value("MACH")
    cmake_args = get_standard_cmake_args(case)

    #---------------------------------------------------------------------------
    # Build MPAS-O source
    #---------------------------------------------------------------------------

    if mach == "edison":
        cmake_args += ' -DTOOL_TARGET_ARCH="-target-cpu=sandybridge"'
    elif mach == "titan":
        cmake_args += ' -DTOOL_TARGET_ARCH="-target-cpu=istanbul"'

    if "MPAS_TOOL_DIR" in os.environ:
        cmake_args += " -DMPAS_TOOL_DIR={}".format(os.environ["MPAS_TOOL_DIR"])

    cmake_args += " -DGEN_F90=True"

    run_bld_cmd_ensure_logging('cmake -DCORE={core} -DDRIVER={component_driver} {cmake_args} {srcroot}/components/mpas-source/src'.format(core=core, component_driver=component_driver, cmake_args=cmake_args, srcroot=srcroot), logger, from_dir=bldroot)
    run_bld_cmd_ensure_logging("{} -j {}".format(gmake, gmake_j), logger, from_dir=bldroot)

###############################################################################
def _main_func():
###############################################################################
    caseroot, libroot, bldroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, libroot, case)

###############################################################################

if __name__ == "__main__":
    _main_func()
