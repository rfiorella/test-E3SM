#!/usr/bin/env python3

"""
Change a runtime parameter for SCREAM/atm. Run from your case
after case.setup.
"""

import argparse, sys, pathlib, os, re
import xml.etree.ElementTree as ET

# Add path to cime_config folder
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), "cime_config"))
from eamxx_buildnml_impl import check_value

###############################################################################
def num_nodes_with_name (root,name,recurse=True):
###############################################################################
    """
    Count nodes with certain name in an XML tree

    >>> xml = '''
    ... <root>
    ...     <a/>
    ...     <sub>
    ...         <a/>
    ...     </sub>
    ... </root>
    ... '''
    >>> import xml.etree.ElementTree as ET
    >>> tree = ET.fromstring(xml)
    >>> num_nodes_with_name(tree,'a',recurse=False)
    1
    >>> num_nodes_with_name(tree,'a',recurse=True)
    2
    """

    count = 0

    for elem in root:
        if elem.tag==name:
            count += 1
        if recurse:
            count += num_nodes_with_name(elem,name)

    return count

###############################################################################
def find_node (root,name,recurse=True):
###############################################################################
    """
    >>> xml = '''
    ... <root>
    ...     <sub>
    ...         <a>2</a>
    ...     </sub>
    ... </root>
    ... '''
    >>> import xml.etree.ElementTree as ET
    >>> tree = ET.fromstring(xml)
    >>> a = find_node(tree,'a',recurse=True)
    >>> print(a.text)
    2
    >>> print(find_node(tree,'a',recurse=False))
    None
    """

    for elem in root:
        if elem.tag==name:
            return elem
        if recurse:
            found = find_node(elem,name)
            if found is not None:
                return found

    return None

###############################################################################
def expect(condition, error_msg, exc_type=SystemExit, error_prefix="ERROR:"):
###############################################################################
    """
    Similar to assert except doesn't generate an ugly stacktrace. Useful for
    checking user error, not programming error.
    """
    if not condition:
        msg = error_prefix + " " + error_msg
        raise exc_type(msg)

###############################################################################
def atm_config_chg_impl(xml_root,changes):
###############################################################################

    any_change = False
    for change in changes:

        tokens = change.split('=')
        expect (len(tokens)==2, "Invalid change format. Expected A[::B[...]=value, got' {}'".format(change))
        selectors = tokens[0].split("::")
        new_value = tokens[1]

        # Regardless of whether we have namespaces or not, the first selector must be unique through the whole XML tree
        s = selectors[0]
        expect (num_nodes_with_name(xml_root,s,recurse=True)>0,"Error! XML entry {} not found in section {}".format(s,root.tag))
        expect (num_nodes_with_name(xml_root,s,recurse=True)==1,"Error! Multiple XML entries with name {} found in section {}".format(s,xml_root.tag))
        node = find_node(xml_root,s,recurse=True)

        # If user specified selectors via namespace, recurse over them
        for s in selectors[1:]:
            expect (num_nodes_with_name(node,s,recurse=False)>0,"Error! XML entry {} not found in section {}".format(s,node.tag))
            expect (num_nodes_with_name(node,s,recurse=False)==1,"Error! Multiple XML entries with name {} found in section {}".format(s,node.tag))
            node = find_node(node,s,recurse=False)

        expect ("locked" not in node.attrib.keys() or node.attrib["locked"]=="false",
                "XML entry cannot be changed, since it's intrinsically linked to the compset.\n"
                "You can create a new compset, and set the new value as default for this entry.\n"
                "  Entry: {}\n".format(tokens[0]) +
                "  Current Value: {}\n".format(node.text) +
                "  New Value: {}\n".format(new_value))
        if node.text != new_value:
            check_value(node,new_value)
            node.text = new_value
            any_change = True

    return any_change

###############################################################################
def atm_config_chg(changes):
###############################################################################
    expect(os.path.exists("namelist_scream.xml"),
           "No pwd/namelist_scream.xml file is present. Please rum from a case dir that has been setup")

    with open("namelist_scream.xml", "r") as fd:
        tree = ET.parse(fd)
        root = tree.getroot()

    any_change = atm_config_chg_impl(root,changes)

    if any_change:
        tree.write("namelist_scream.xml")

    return True

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <param>=<val> [<param>=<val>] ...
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Change param foo of group bar to 'hi'\033[0m
    > {0} bar::foo=hi

    \033[1;32m# Change param foo to 'hi' (only works if foo is unambiguous)\033[0m
    > {0} foo=hi

    \033[1;32m# Change params foo to 'hi' and bar to 'there' (only works if both are unambiguous)\033[0m
    > {0} foo=hi bar=there
""".format(pathlib.Path(args[0]).name),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("changes", nargs="+", help="Values to change")

    return parser.parse_args(args[1:])

###############################################################################
def _main_func(description):
###############################################################################
    if "--test" in sys.argv:
        from doctest import testmod
        testmod()
    else:
        success = atm_config_chg(**vars(parse_command_line(sys.argv, description)))
        sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
