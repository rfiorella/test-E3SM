#!/usr/bin/env python3

"""
Drive ctest testing of scream for a complete set of tests. This will be our
gold standard to determine if the code is working or not on the current platform.

Run from $scream-repo/components/scream
"""

from utils import expect, check_minimum_python_version, is_repo_clean
check_minimum_python_version(3, 4)

import argparse, sys, os

from test_all_scream import TestAllScream

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} <ARGS> [--verbose]
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run all tests on current machine \033[0m
    > cd $scream_repo/components/scream
    > ./scripts/test-all-scream $(which mpicxx) -m melvin
""".format(os.path.basename(args[0])),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument("cxx", help="C++ compiler")

    parser.add_argument("-k", "--kokkos", help="Kokkos installation to use. Default is to build our own.")

    parser.add_argument("-s", "--submit", action="store_true", help="Submit results to dashboad, requires machine")

    default_baseline = "HEAD" if "JENKINS_HOME" in os.environ else "origin/master"
    parser.add_argument("-b", "--baseline", default=default_baseline,
                        help="What commit to use to generate baselines")

    parser.add_argument("-m", "--machine", help="Provide machine name. This is required for internal kokkos builds and dashboard submission")

    parser.add_argument("-c", "--custom-cmake-opts",
                        help="Extra custom options to pass to cmake")

    parser.add_argument("-t", "--test", dest="tests", action="append", default=[],
                        help="Only run specific test configurations, choices='dbg' (debug), 'sp' (single-prec), 'fpe' (floating-point exceptions)")

    args = parser.parse_args(args[1:])

    expect(os.getcwd().endswith("components/scream"), "Run from $scream_repo/components/scream")
    expect(is_repo_clean(), "Repo must be clean before running")
    if not args.kokkos:
        expect(args.machine, "If no external kokkos provided, must provide machine name for internal kokkos build")
    if args.submit:
        expect(args.machine, "If dashboard submit request, must provide machine name")

    return args

###############################################################################
def _main_func(description):
###############################################################################
    tas = TestAllScream(**vars(parse_command_line(sys.argv, description)))

    success = tas.test_all_scream()

    sys.exit(0 if success else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
