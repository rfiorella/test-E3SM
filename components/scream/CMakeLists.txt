cmake_minimum_required(VERSION 3.3)
cmake_policy(SET CMP0057 NEW)

project(SCREAM CXX Fortran)
set (CMAKE_CXX_STANDARD 11)

# Print the sha of the last commit (useful to double check which version was tested on CDash)
EXECUTE_PROCESS (COMMAND git rev-parse HEAD
                 WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                 OUTPUT_VARIABLE LAST_GIT_COMMIT_SHA
                 OUTPUT_STRIP_TRAILING_WHITESPACE)
SET (LAST_GIT_COMMIT_SHA ${LAST_GIT_COMMIT_SHA} CACHE STRING "The sha of the last git commit.")
MESSAGE (STATUS "The sha of the last commit is ${LAST_GIT_COMMIT_SHA}")

# Set the scream base and src directory, to be used across subfolders
SET (SCREAM_BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
SET (SCREAM_SRC_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/src)

# Add the ./cmake folder to cmake path
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# Shortcut function, to print a variable
function (print_var var)
  message ("${var}: ${${var}}")
endfunction ()

enable_testing()
include(CTest)

# Build kokkos submodule if user did not specify Kokkos_DIR
if (NOT DEFINED Kokkos_DIR)
  # Bring in Kokkos
  set(SCREAM_KOKKOS_CONFIG -D CMAKE_BUILD_TYPE=Release -D KOKKOS_ENABLE_AGGRESSIVE_VECTORIZATION=ON -D KOKKOS_ENABLE_OPENMP=ON -D KOKKOS_ENABLE_PROFILING=OFF -D KOKKOS_ENABLE_DEPRECATED_CODE=OFF -D KOKKOS_ENABLE_EXPLICIT_INSTANTIATION:BOOL=OFF CACHE STRING "How to configure kokkos (generate_makefile args)")

  set(KOKKOS_SRC    ${CMAKE_SOURCE_DIR}/../../externals/kokkos)
  set(KOKKOS_BINARY ${CMAKE_BINARY_DIR}/kokkos/install)

  file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/kokkos)
  execute_process(
    COMMAND cmake ${SCREAM_KOKKOS_CONFIG} -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} -DCMAKE_INSTALL_PREFIX=${KOKKOS_BINARY} ${KOKKOS_SRC}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/kokkos
    ERROR_VARIABLE kokkos_config_ev
    RESULT_VARIABLE kokkos_config_res)
  if(NOT kokkos_config_res STREQUAL "0")
    message(FATAL_ERROR "kokkos gen makefile failed: ${kokkos_config_ev}")
  endif()

  execute_process(COMMAND make -j8 WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/kokkos ERROR_VARIABLE kokkos_build_ev RESULT_VARIABLE kokkos_build_res)
  if(NOT kokkos_build_res STREQUAL "0")
    message(FATAL_ERROR "kokkos build failed: ${kokkos_build_ev}")
  endif()

  execute_process(COMMAND make install WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/kokkos ERROR_VARIABLE kokkos_install_ev RESULT_VARIABLE kokkos_install_res)
  if(NOT kokkos_install_res STREQUAL "0")
    message(FATAL_ERROR "kokkos install failed: ${kokkos_install_ev}")
  endif()

  set(Kokkos_DIR ${KOKKOS_BINARY})
endif()

# Find Kokkos, initialize some compiler/linke variable based on what we find in it,
# then proceed with setting the rest of the compiler(s) flags
include(Kokkos)
set (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -cpp")
SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${KOKKOS_CXXFLAGS_STR}")

# Determine if this is a Cuda build.
string(FIND "${KOKKOS_GMAKE_DEVICES}" "Cuda" cuda_str_pos)
set(CUDA_BUILD FALSE)
if (${cuda_str_pos} GREATER -1)
  set(CUDA_BUILD TRUE)
endif ()

# Compute reasonable defaults. This needs to happen before the CACHE variables
# are set.
STRING(TOLOWER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_ci)

set(DEFAULT_PACK_SIZE 16)
set(DEFAULT_SMALL_PACK_SIZE 16)
set(DEFAULT_MAX_THREADS 16)
set(DEFAULT_MIMIC_GPU FALSE)
set(DEFAULT_FPE FALSE)
if (CUDA_BUILD)
  # On the GPU, the pack size must be 1
  set(DEFAULT_PACK_SIZE 1)
  set(DEFAULT_SMALL_PACK_SIZE 1)
  set(DEFAULT_MAX_THREADS 1)
else()
  if (CMAKE_BUILD_TYPE_ci STREQUAL "debug")
    set(DEFAULT_MIMIC_GPU TRUE)
  endif()
endif ()

# Scream configuration options
set(SCREAM_DOUBLE_PRECISION TRUE CACHE LOGICAL "Set to double precision (default True)")
set(SCREAM_MIMIC_GPU ${DEFAULT_MIMIC_GPU} CACHE LOGICAL "Mimic GPU to correctness-test inter-column parallelism on non-GPU platform")
set(SCREAM_PACK_CHECK_BOUNDS FALSE CACHE LOGICAL "If defined, scream::pack objects check indices against bounds")
set(SCREAM_PACK_SIZE ${DEFAULT_PACK_SIZE} CACHE INTEGER
  "The number of scalars in a scream::pack::Pack and Mask. Larger packs have good performance on conditional-free loops due to improved caching.")
set(SCREAM_SMALL_PACK_SIZE ${DEFAULT_SMALL_PACK_SIZE} CACHE INTEGER
  "The number of scalars in a scream::pack::SmallPack and SmallMask. Smaller packs can have better performance in loops with conditionals since more of the packs will have masks with uniform value.")
set(SCREAM_TEST_DATA_DIR ${CMAKE_BINARY_DIR}/data CACHE FILEPATH "Location of data files generated by tests")
set(SCREAM_MPI_ERRORS_ARE_FATAL TRUE CACHE LOGICAL "Whether MPI errors should abort (default TRUE). If false, errors should be handled.")
if (CMAKE_BUILD_TYPE_ci STREQUAL "debug" AND ${SCREAM_PACK_SIZE} EQUAL 1 AND NOT ${CUDA_BUILD})
  set(DEFAULT_FPE TRUE)
endif()
set(SCREAM_FPE ${DEFAULT_FPE} CACHE LOGICAL "Enable floating point error exception")


# Check for valid pack sizes
math(EXPR PACK_MODULO "${SCREAM_PACK_SIZE} % ${SCREAM_SMALL_PACK_SIZE}")
if ( (SCREAM_SMALL_PACK_SIZE GREATER SCREAM_PACK_SIZE) OR (NOT PACK_MODULO EQUAL 0) )
  message(FATAL_ERROR "Invalid small pack size. Needs to be <= pack_size and be a factor of it")
endif()

set(CATCH_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/extern/catch2/include)

# Scream test configuration options
set(SCREAM_TEST_MAX_THREADS ${DEFAULT_MAX_THREADS} CACHE INTEGER "Upper limit on threads for threaded tests")
set(SCREAM_TEST_THREAD_INC 1 CACHE INTEGER "Thread count increment for threaded tests")

# Set compiler-specific flags
include(SetCompilerFlags)

set (SCREAM_LINK_FLAGS ${KOKKOS_LDFLAGS_STR})
set (SCREAM_INCLUDE_DIRS ${SCREAM_SRC_DIR} ${CMAKE_BINARY_DIR}/src)
set (SCREAM_LIBRARY_DIRS ${CMAKE_CURRENT_BINARY_DIR}/src)

set (SCREAM_TPL_INCLUDE_DIRS ${Kokkos_INCLUDE_DIR})
set (SCREAM_TPL_LIBRARY_DIRS ${Kokkos_LIBRARY_DIR})
set (SCREAM_TPL_LIBRARIES ${KOKKOS_LIBS})

if (${SCREAM_DOUBLE_PRECISION})
  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -real-size 64 ")
  else()
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fdefault-real-8 ")
  endif()
endif()

print_var(KOKKOS_GMAKE_DEVICES)
print_var(CUDA_BUILD)
print_var(SCREAM_DOUBLE_PRECISION)
print_var(SCREAM_MIMIC_GPU)
print_var(SCREAM_FPE)
print_var(SCREAM_PACK_SIZE)
print_var(SCREAM_SMALL_PACK_SIZE)
print_var(SCREAM_INCLUDE_DIRS)
print_var(SCREAM_LINK_FLAGS)
print_var(SCREAM_LIBRARY_DIRS)
print_var(SCREAM_LIBRARIES)

# This must be done using add_definitions because it is used to determine
# whether to include scream_config.h.
add_definitions(-DSCREAM_CONFIG_IS_CMAKE)
CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/src/scream_config.h.in ${CMAKE_BINARY_DIR}/src/scream_config.h)
CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/src/scream_config.f.in ${CMAKE_BINARY_DIR}/src/scream_config.f)
# Run sed to change '/*...*/' comments into '!/*...*/'
EXECUTE_PROCESS(COMMAND sed -i "s;^/;!/;g" ${CMAKE_BINARY_DIR}/src/scream_config.f)


set (SCREAM_F90_MODULES ${CMAKE_BINARY_DIR}/modules)
set (SCREAM_DATA_DIR ${CMAKE_SOURCE_DIR}/data)

file(MAKE_DIRECTORY ${SCREAM_TEST_DATA_DIR})

add_custom_target(baseline)

add_subdirectory(src)
add_subdirectory(tests)
