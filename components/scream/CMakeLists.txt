cmake_minimum_required(VERSION 3.3)
cmake_policy(SET CMP0057 NEW)

project(SCREAM CXX Fortran)

# Print the sha of the last commit (useful to double check which version was tested on CDash)
EXECUTE_PROCESS (COMMAND git rev-parse HEAD
                 WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
                 OUTPUT_VARIABLE LAST_GIT_COMMIT_SHA
                 OUTPUT_STRIP_TRAILING_WHITESPACE)
SET (LAST_GIT_COMMIT_SHA ${LAST_GIT_COMMIT_SHA} CACHE STRING "The sha of the last git commit.")
MESSAGE (STATUS "The sha of the last commit is ${LAST_GIT_COMMIT_SHA}")

# Set the scream base and src directory, to be used across subfolders
SET (SCREAM_BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
SET (SCREAM_SRC_DIR  ${CMAKE_CURRENT_SOURCE_DIR}/src)

# Add the ./cmake folder to cmake path
SET (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

# Shortcut function, to print a variable
function (print_var var)
  message ("${var}: ${${var}}")
endfunction ()

enable_testing()
include(CTest)

# Scream configuration options
set(SCREAM_DOUBLE_PRECISION FALSE CACHE LOGICAL "Set to double precision (default True)")
set(SCREAM_ENABLE_FPE FALSE CACHE LOGICAL "Enable floating point error exception")
set(SCREAM_PACK_CHECK_BOUNDS FALSE CACHE LOGICAL "If defined, scream::pack objects check indices against bounds")
set(SCREAM_PACK_SIZE 16 CACHE INTEGER "The number of scalars in a scream::pack::Pack and Mask")
set(SCREAM_TEST_DATA_DIR ${CMAKE_BINARY_DIR}/data CACHE FILEPATH "Location of data files generated by tests")
set(SCREAM_MPI_ERRORS_ARE_FATAL TRUE CACHE LOGICAL "Whether MPI errors should abort (default TRUE). If false, errors should be handled.")

set(CATCH_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/extern/catch2/include)

# Find Kokkos, initialize some compiler/linke variable based on what we find in it,
# then proceed with setting the rest of the compiler(s) flags
include(Kokkos)
set (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -cpp")
SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${KOKKOS_CXXFLAGS_STR}")

# Determine if this is a Cuda build.
string(FIND "${KOKKOS_GMAKE_DEVICES}" "Cuda" cuda_str_pos)
set(CUDA_BUILD FALSE)
if (${cuda_str_pos} GREATER -1)
  set(CUDA_BUILD TRUE)
endif ()

if (CUDA_BUILD)
  # On the GPU, the pack size must be 1.
  set (SCREAM_PACK_SIZE 1)
endif ()

# Set compiler-specific flags
include(SetCompilerFlags)

set (SCREAM_LINK_FLAGS ${KOKKOS_LDFLAGS_STR})
set (SCREAM_INCLUDE_DIRS ${SCREAM_SRC_DIR} ${CMAKE_BINARY_DIR}/src)
set (SCREAM_LIBRARY_DIRS ${CMAKE_CURRENT_BINARY_DIR}/src)

set (SCREAM_TPL_INCLUDE_DIRS ${Kokkos_INCLUDE_DIR})
set (SCREAM_TPL_LIBRARY_DIRS ${Kokkos_LIBRARY_DIR})
set (SCREAM_TPL_LIBRARIES ${KOKKOS_LIBS})

if (${SCREAM_DOUBLE_PRECISION})
  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -real-size 64 ")
  else()
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fdefault-real-8 ")
  endif()
endif()

if (${SCREAM_ENABLE_FPE})
  set (SCREAM_FPE ON)
endif()

print_var(KOKKOS_GMAKE_DEVICES)
print_var(CUDA_BUILD)
print_var(SCREAM_DOUBLE_PRECISION)
print_var(SCREAM_ENABLE_FPE)
print_var(SCREAM_PACK_SIZE)
print_var(SCREAM_INCLUDE_DIRS)
print_var(SCREAM_LINK_FLAGS)
print_var(SCREAM_LIBRARY_DIRS)
print_var(SCREAM_LIBRARIES)

# This must be done using add_definitions because it is used to determine
# whether to include scream_config.h.
add_definitions(-DSCREAM_CONFIG_IS_CMAKE)
CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/src/scream_config.h.in ${CMAKE_BINARY_DIR}/src/scream_config.h)
CONFIGURE_FILE (${CMAKE_CURRENT_SOURCE_DIR}/src/scream_config.f.in ${CMAKE_BINARY_DIR}/src/scream_config.f)

set (SCREAM_F90_MODULES ${CMAKE_BINARY_DIR}/modules)
set (SCREAM_DATA_DIR ${CMAKE_SOURCE_DIR}/data)

file(MAKE_DIRECTORY ${SCREAM_TEST_DATA_DIR})

add_custom_target(baseline)

add_subdirectory(src)
add_subdirectory(tests)
