#! /usr/bin/env python

from CIME.utils import expect, run_bld_cmd_ensure_logging, safe_copy
from CIME.build import get_standard_cmake_args
from CIME.case import Case

import logging, os

logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [--debug]
OR
{0} --verbose
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > {0}
""" .format (os.path.basename(args[0])),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("buildroot",
                        help="build path root")

    parser.add_argument("installpath",
                        help="install path ")

    parser.add_argument("caseroot", nargs="?", default=os.getcwd(),
                        help="Case directory to build")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.buildroot, args.installpath, args.caseroot

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################
    casebuild  = case.get_value("CASEBUILD")
    srcroot    = case.get_value("SRCROOT")
    gmake_j    = case.get_value("GMAKE_J")
    gmake      = case.get_value("GMAKE")
    cmake_args = get_standard_cmake_args(case)

    filepath_src = os.path.join(casebuild, "camconf", "Filepath")
    expect(os.path.exists(filepath_src), "Missing {}".format(filepath_src))
    safe_copy(filepath_src, bldroot)

    with open(os.path.join(casebuild, "camconf", "CCSM_cppdefs")) as fd:
        camdefs = fd.read().strip()

    run_bld_cmd_ensure_logging('cmake -DMODEL=cam -DCOMPLIB=atm -DUSER_CPPDEFS="{camdefs}" {cmake_args} {srcroot}/components'.format(casebuild=casebuild, camdefs=camdefs, cmake_args=cmake_args, srcroot=srcroot), logger, from_dir=bldroot)
    run_bld_cmd_ensure_logging("{} -j {}".format(gmake, gmake_j), logger, from_dir=bldroot)

###############################################################################
def _main(argv, documentation):
###############################################################################
    bldroot, installpath, caseroot = parse_command_line(argv, documentation)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, installpath, case)

if (__name__ == "__main__"):
    _main(sys.argv, __doc__)
