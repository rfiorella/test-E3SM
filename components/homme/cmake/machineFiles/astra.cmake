# CMake initial cache file for Anvil
#
# 2017/11 MT:  Set NETCDF and PNETCDF paths using same approach as CIME
#              Rely on CIME's FindNetCDF and FindPnetCDF for all remaining config
#
#SET (CMAKE_Fortran_COMPILER mpif90 CACHE FILEPATH "")
#SET (CMAKE_C_COMPILER mpicc CACHE FILEPATH "")
#SET (CMAKE_CXX_COMPILER mpicxx CACHE FILEPATH "")

#SET (WITH_PNETCDF FALSE CACHE FILEPATH "")
#
# anvil module system doesn't set environment variables, but will put
# nc-config in our path.  anvil seperates C and Fortran libraries,
# so we need to set both paths instead of NETCDF_DIR
#

#EXECUTE_PROCESS(COMMAND nf-config --prefix
#  RESULT_VARIABLE NFCONFIG_RESULT
#  OUTPUT_VARIABLE NFCONFIG_OUTPUT
#  ERROR_VARIABLE  NFCONFIG_ERROR
#  OUTPUT_STRIP_TRAILING_WHITESPACE
#)
#SET (NetCDF_Fortran_PATH "${NFCONFIG_OUTPUT}" CACHE STRING "")
#EXECUTE_PROCESS(COMMAND nc-config --prefix
#  RESULT_VARIABLE NCCONFIG_RESULT
#  OUTPUT_VARIABLE NCCONFIG_OUTPUT
#  ERROR_VARIABLE  NCCONFIG_ERROR
#  OUTPUT_STRIP_TRAILING_WHITESPACE
#)
#SET (NetCDF_C_PATH "${NCCONFIG_OUTPUT}" CACHE STRING "")


#SET (USE_MPIEXEC "srun" CACHE STRING "")
#SET (HOMME_USE_MKL "TRUE" CACHE FILEPATH "") # for Intel
SET (USE_QUEUING FALSE CACHE BOOL "")
SET(BUILD_HOMME_PREQX_KOKKOS TRUE CACHE BOOL "")
# for standalone HOMME builds:
#SET (CPRNC_DIR /lcrc/group/acme/tools/cprnc CACHE FILEPATH "")

#SET (E3SM_KOKKOS_PATH /ascldap/users/onguba/kokkos/build-omp CACHE FILEPATH "")

set (extra_flags "-mtune=thunderx2t99 -mcpu=thunderx2t99")
set (CMAKE_Fortran_FLAGS "-g ${extra_flags}" CACHE STRING "")
set (CMAKE_C_FLAGS "-g ${extra_flags}" CACHE STRING "")
set (CMAKE_CXX_FLAGS "-g ${extra_flags}" CACHE STRING "")
set (CMAKE_EXE_LINKER_FLAGS "-ldl" CACHE STRING "")

set (ENABLE_HORIZ_OPENMP FALSE CACHE BOOL "")
SET (HOMME_FIND_BLASLAPACK TRUE CACHE BOOL "")


SET(CMAKE_C_COMPILER "mpicc" CACHE STRING "")
SET(CMAKE_CXX_COMPILER "mpicxx" CACHE STRING "")
SET(CMAKE_Fortran_COMPILER "mpifort" CACHE STRING "")


#C_INCLUDES, Fortran_INCLUDES

#EXECUTE_PROCESS(COMMAND nf-config --flibs
#  RESULT_VARIABLE NFCONFIG_RESULT
#  OUTPUT_VARIABLE NFCONFIG_OUTPUT
#  ERROR_VARIABLE  NFCONFIG_ERROR
#  OUTPUT_STRIP_TRAILING_WHITESPACE
#)
#SET (ADD_LINKER_FLAGS " ${NFCONFIG_OUTPUT} " CACHE STRING "")
#
#EXECUTE_PROCESS(COMMAND nc-config --libs
#  RESULT_VARIABLE NCCONFIG_RESULT
#  OUTPUT_VARIABLE NCCONFIG_OUTPUT
#  ERROR_VARIABLE  NCCONFIG_ERROR
#  OUTPUT_STRIP_TRAILING_WHITESPACE
#)
#SET (ADD_LINKER_FLAGS " ${NCCONFIG_OUTPUT} " CACHE STRING "")
